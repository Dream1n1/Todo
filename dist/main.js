(()=>{"use strict";var n={904:(n,e,t)=>{t.d(e,{c:()=>c});var r=t(648),o=t.n(r),a=t(312),i=t.n(a)()(o());i.push([n.id,"* {\n    margin: 0;\n    padding: 0;\n}\n\nbody {\n    background-color: #264653;\n}\n\nbutton {\n    padding: 7px;\n    border-style: hidden;\n    border-radius: 10px;\n    background-color: #e9c46a;\n}\n\n.header {\n    display: grid;\n    background-color: #2a9d8f;\n    padding: 20px;\n    margin-bottom: 20px;\n    box-shadow: 0px 3px 7px -1px rgba(0,0,0,0.41);\n    -webkit-box-shadow: 0px 3px 7px -1px rgba(0,0,0,0.41);\n    -moz-box-shadow: 0px 3px 7px -1px rgba(0,0,0,0.41);\n}\n.header > h1 {\n    justify-self: center;\n    align-self: center;\n    color: white;\n}\n\n\n.container {\n    display: grid;\n    grid-template-columns: 30% 70%;\n    \n}\n\nform {\n    margin-bottom: 15px;\n}\n\n\n\n.project_name_input{\n    border: 2px;\n    border-style: solid;\n    border-color: #2a9d8f;\n    border-radius: 15px;\n    padding: 10px;\n}\n.project {\n    padding: 10px;\n    margin: 2px;\n    border-radius: 10px;\n    color: #f0e8d3;\n    background-color: #2a9d8f;\n    font-size: 20px;\n    font-weight: bold;\n    \n}\n\n.content {\n    justify-self: end;\n    margin-right: 10%;\n}\n\n#task_form > input {\n    border: 2px;\n    border-style: solid;\n    border-color: green;\n    border-radius: 15px;\n    padding: 10px;\n}\n.task_item {\n    display: flex;\n    justify-content: space-between;\n    padding: 10px;\n    background-color: #f4a261;\n}","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,yBAAyB;AAC7B;;AAEA;IACI,YAAY;IACZ,oBAAoB;IACpB,mBAAmB;IACnB,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,yBAAyB;IACzB,aAAa;IACb,mBAAmB;IACnB,6CAA6C;IAC7C,qDAAqD;IACrD,kDAAkD;AACtD;AACA;IACI,oBAAoB;IACpB,kBAAkB;IAClB,YAAY;AAChB;;;AAGA;IACI,aAAa;IACb,8BAA8B;;AAElC;;AAEA;IACI,mBAAmB;AACvB;;;;AAIA;IACI,WAAW;IACX,mBAAmB;IACnB,qBAAqB;IACrB,mBAAmB;IACnB,aAAa;AACjB;AACA;IACI,aAAa;IACb,WAAW;IACX,mBAAmB;IACnB,cAAc;IACd,yBAAyB;IACzB,eAAe;IACf,iBAAiB;;AAErB;;AAEA;IACI,iBAAiB;IACjB,iBAAiB;AACrB;;AAEA;IACI,WAAW;IACX,mBAAmB;IACnB,mBAAmB;IACnB,mBAAmB;IACnB,aAAa;AACjB;AACA;IACI,aAAa;IACb,8BAA8B;IAC9B,aAAa;IACb,yBAAyB;AAC7B",sourcesContent:["* {\n    margin: 0;\n    padding: 0;\n}\n\nbody {\n    background-color: #264653;\n}\n\nbutton {\n    padding: 7px;\n    border-style: hidden;\n    border-radius: 10px;\n    background-color: #e9c46a;\n}\n\n.header {\n    display: grid;\n    background-color: #2a9d8f;\n    padding: 20px;\n    margin-bottom: 20px;\n    box-shadow: 0px 3px 7px -1px rgba(0,0,0,0.41);\n    -webkit-box-shadow: 0px 3px 7px -1px rgba(0,0,0,0.41);\n    -moz-box-shadow: 0px 3px 7px -1px rgba(0,0,0,0.41);\n}\n.header > h1 {\n    justify-self: center;\n    align-self: center;\n    color: white;\n}\n\n\n.container {\n    display: grid;\n    grid-template-columns: 30% 70%;\n    \n}\n\nform {\n    margin-bottom: 15px;\n}\n\n\n\n.project_name_input{\n    border: 2px;\n    border-style: solid;\n    border-color: #2a9d8f;\n    border-radius: 15px;\n    padding: 10px;\n}\n.project {\n    padding: 10px;\n    margin: 2px;\n    border-radius: 10px;\n    color: #f0e8d3;\n    background-color: #2a9d8f;\n    font-size: 20px;\n    font-weight: bold;\n    \n}\n\n.content {\n    justify-self: end;\n    margin-right: 10%;\n}\n\n#task_form > input {\n    border: 2px;\n    border-style: solid;\n    border-color: green;\n    border-radius: 15px;\n    padding: 10px;\n}\n.task_item {\n    display: flex;\n    justify-content: space-between;\n    padding: 10px;\n    background-color: #f4a261;\n}"],sourceRoot:""}]);const c=i},312:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var d=this[c][0];null!=d&&(i[d]=!0)}for(var s=0;s<n.length;s++){var A=[].concat(n[s]);r&&i[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),e.push(A))}},e}},648:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */");return[e].concat([a]).join("\n")}return[e].join("\n")}},596:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],c=0;c<n.length;c++){var d=n[c],s=r.base?d[0]+r.base:d[0],A=a[s]||0,p="".concat(s," ").concat(A);a[s]=A+1;var u=t(p),l={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)e[u].references++,e[u].updater(l);else{var m=o(l,r);r.byIndex=c,e.splice(c,0,{identifier:p,updater:m,references:1})}i.push(p)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=t(a[i]);e[c].references--}for(var d=r(n,o),s=0;s<a.length;s++){var A=t(a[s]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=d}}},176:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},808:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},120:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},520:n=>{n.exports=function(n){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},936:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.nc=void 0,(()=>{var n=t(596),e=t.n(n),r=t(520),o=t.n(r),a=t(176),i=t.n(a),c=t(120),d=t.n(c),s=t(808),A=t.n(s),p=t(936),u=t.n(p),l=t(904),m={};m.styleTagTransform=u(),m.setAttributes=d(),m.insert=i().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=A(),e()(l.c,m),l.c&&l.c.locals&&l.c.locals;let f=[];class b{constructor(n,e,t,r){this.title=n,this.due_date=e,this.note=t,this.check="uncheck"}}function h(n,e,t,r,o,a){const i=document.querySelector(".tasks");let c=document.createElement("div");c.className="task_item";let d=document.createElement("input");d.setAttribute("type","checkbox"),d.setAttribute("id","task_check");let s=n[o].indexOf(a);"checked"==n[o][s].check?(d.checked=!0,c.style.textDecoration="line-through"):c.style.textDecoration="none",d.addEventListener("click",(()=>{1==d.checked?(n[o][s].check="checked",c.style.textDecoration="line-through"):(n[o][s].check="uncheck",c.style.textDecoration="none")}));let A=document.createElement("div");A.className="task_name",A.innerHTML=e;let p=document.createElement("div");p.className="task_date",p.innerHTML=t;let u=document.createElement("div");u.className="task_note",u.innerHTML=r,c.appendChild(d),c.appendChild(A),c.appendChild(p),c.appendChild(u),i.appendChild(c)}const x=document.querySelector(".project_name_input"),C=document.querySelector(".projectList"),g=document.querySelector("#task_name_input"),v=document.querySelector("#task_date_input"),y=document.querySelector("#task_note_input"),B=document.querySelector(".tasks");function I(n){for(;n.firstChild;)n.removeChild(n.firstChild)}let k,E,_=0;const j=document.querySelector(".submitProject"),w=document.querySelector(".submitTask");j.addEventListener("click",(()=>{!function(){if(""!=x.value){{f.push([]),I(B);let n=document.createElement("div");n.className="project",n.setAttribute("id",_.toString()),n.innerHTML=x.value,x.value="",E=_,k=_,n.addEventListener("click",(n=>(E=k,k=parseInt(n.target.id),E==k?void 0:(I(B),f[k].forEach((n=>{h(f,n.title,n.due_date,n.note,k,n)})),k)))),C.appendChild(n),_++}}}()})),w.addEventListener("click",(function(){if(g.value&&v.value){let n=function(n,e,t,r,o){let a=new b(e,t,r,void 0);return f[n].push(a),a}(k,g.value,v.value,y.value);h(f,g.value,v.value,y.value,k,n)}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,